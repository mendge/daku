@startuml
namespace executor {
    class CommandExecutor << (S,Aquamarine) >> {
        - cmd *exec.Cmd

        + Run() error
        + SetStdout(out io.Writer) 
        + SetStderr(out io.Writer) 
        + Kill(sig os.Signal) error

    }
    class DockerExecutor << (S,Aquamarine) >> {
        - image string
        - autoRemove bool
        - step *dag.Step
        - containerConfig *container.Config
        - hostConfig *container.HostConfig
        - stdout io.Writer
        - context context.Context
        - cancel <font color=blue>func</font>() 

        + SetStdout(out io.Writer) 
        + SetStderr(out io.Writer) 
        + Kill(sig os.Signal) error
        + Run() error

    }
    interface Executor  {
        + SetStdout(out io.Writer) 
        + SetStderr(out io.Writer) 
        + Kill(sig os.Signal) error
        + Run() error

    }
    class HTTPConfig << (S,Aquamarine) >> {
        + Timeout int
        + Headers <font color=blue>map</font>[string]string
        + Queries <font color=blue>map</font>[string]string
        + Body string
        + Silent bool

    }
    class HTTPExecutor << (S,Aquamarine) >> {
        - stdout io.Writer
        - req *resty.Request
        - reqCancel context.CancelFunc
        - url string
        - method string
        - cfg *HTTPConfig

        + SetStdout(out io.Writer) 
        + SetStderr(out io.Writer) 
        + Kill(sig os.Signal) error
        + Run() error

    }
    class JqConfig << (S,Aquamarine) >> {
        + Raw bool

    }
    class JqExecutor << (S,Aquamarine) >> {
        - stdout io.Writer
        - stderr io.Writer
        - query string
        - input <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        - cfg *JqConfig

        + SetStdout(out io.Writer) 
        + SetStderr(out io.Writer) 
        + Kill(sig os.Signal) error
        + Run() error

    }
    class MailConfig << (S,Aquamarine) >> {
        + From string
        + To string
        + Subject string
        + Message string

    }
    class MailExecutor << (S,Aquamarine) >> {
        - stdout io.Writer
        - stderr io.Writer
        - mailer *mailer.Mailer
        - cfg *MailConfig

        + SetStdout(out io.Writer) 
        + SetStderr(out io.Writer) 
        + Kill(sig os.Signal) error
        + Run() error

    }
    class SSHConfig << (S,Aquamarine) >> {
        + User string
        + IP string
        + Port int
        + Key string
        + StrictHostKeyChecking bool

    }
    class SSHExecutor << (S,Aquamarine) >> {
        - step *dag.Step
        - config *SSHConfig
        - sshConfig *ssh.ClientConfig
        - stdout io.Writer
        - session *ssh.Session

        + SetStdout(out io.Writer) 
        + SetStderr(out io.Writer) 
        + Kill(sig os.Signal) error
        + Run() error

    }
    class executor.Creator << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(context.Context, *dag.Step) (Executor, error)" as fontcolorbluefuncfontcontextContextdagStepExecutorerror {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"executor.Executor" <|-- "executor.CommandExecutor"
"executor.Executor" <|-- "executor.DockerExecutor"
"executor.Executor" <|-- "executor.HTTPExecutor"
"executor.Executor" <|-- "executor.JqExecutor"
"executor.Executor" <|-- "executor.MailExecutor"
"executor.Executor" <|-- "executor.SSHExecutor"

"executor.fontcolorbluefuncfontcontextContextdagStepExecutorerror" #.. "executor.Creator"
@enduml
